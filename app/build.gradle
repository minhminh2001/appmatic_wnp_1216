buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude '.readme'
    }
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher=false
    }
    testOptions {
        unitTests.all {
            setIgnoreFailures(true)
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.android.support:support-annotations:23.0.1'
    }

    dexOptions {
        preDexLibraries = false
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        applicationId rootProject.ext.android.applicationId
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "SERVICE_VERSION", String.format("\"%s\"",SERVICE_VERSION))
        buildConfigField("String", "DOWNLOAD_IMAGE_PATH", String.format("\"%s\"",DOWNLOAD_IMAGE_PATH))
        buildConfigField("String", "DOWNLOAD_IMAGE_PRODUCT_PATH", String.format("\"%s\"",DOWNLOAD_IMAGE_PRODUCT_PATH))
		buildConfigField("String", "PAYMENT_CREDITCARD_URL", String.format("\"%s\"",PAYMENT_CREDITCARD_URL))
		buildConfigField("String", "UPLOAD_FILE_PATH", String.format("\"%s\"",UPLOAD_FILE_PATH))
		buildConfigField("String", "JUMP_MARKET_URI", String.format("\"%s\"",JUMP_MARKET_URI))
		buildConfigField("String", "GCM_SENDER_ID", String.format("\"%s\"",GCM_SENDER_ID))
		buildConfigField("String", "FACEBOOK_ID", String.format("\"%s\"",FACEBOOK_ID))
		buildConfigField("String", "TWITTER_CONSUMER_KEY", String.format("\"%s\"",TWITTER_CONSUMER_KEY))
		buildConfigField("String", "TWITTER_CONSUMER_SECRET", String.format("\"%s\"",TWITTER_CONSUMER_SECRET))
		buildConfigField("String", "TWITTER_SUBDOMAIN", String.format("\"%s\"",TWITTER_SUBDOMAIN))
		buildConfigField("String", "GOOGLE_SERVER_CLIENT_ID", String.format("\"%s\"",GOOGLE_SERVER_CLIENT_ID))
		buildConfigField("String", "BUILD_ID", String.format("\"%s\"",BUILD_ID))
		buildConfigField("String", "FABRIC_API_KEY", String.format("\"%s\"",FABRIC_API_KEY))
		buildConfigField("String", "MARKET_URL", String.format("\"%s\"",MARKET_URL))
		buildConfigField("String", "GOOGLE_PLAY_STORE_URL", String.format("\"%s\"",GOOGLE_PLAY_STORE_URL))
        buildConfigField("String", "API_KEY", String.format("\"%s\"",API_KEY))
        buildConfigField("String", "API_VERSION", String.format("\"%s\"",API_VERSION))
        buildConfigField("String", "MOCK_URL", String.format("\"%s\"",MOCK_URL))
    }

    productFlavors {
        WNP_LIVE {
            buildConfigField("String", "APP_KEY", String.format("\"%s\"",APP_KEY_LIVE))
            buildConfigField("String", "GA_ID", String.format("\"%s\"",GA_ID_LIVE))
            buildConfigField("String", "BASE_URL", String.format("\"%s\"",BASE_URL_LIVE))
            buildConfigField("String", "IMAGE_URL", String.format("\"%s\"",IMAGE_URL_LIVE))
        }

        WNP_UAT{
            buildConfigField("String", "APP_KEY", String.format("\"%s\"",APP_KEY_UAT))
            buildConfigField("String", "GA_ID", String.format("\"%s\"",GA_ID_UAT))
            buildConfigField("String", "BASE_URL", String.format("\"%s\"",BASE_URL_UAT))
            buildConfigField("String", "IMAGE_URL", String.format("\"%s\"",IMAGE_URL_UAT))
        }

    }
    signingConfigs {
        sign
    }
    buildTypes {
        release {
            signingConfig signingConfigs.sign
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main { jniLibs.srcDirs = ['libs'] }
    }
    lintOptions {
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
}
ext {
    SUPPORT_LIB_VERSION = '25.0.1'
    BUTTERKNIFE_VERSION = '8.4.0'
    PLAY_SERVICE_VERSION = '9.4.0'
    RETROFIT2_VERSION = '2.3.0'
    PERMISSION_VERSION = '2.4.0'
    DAGGER_VERSION="2.6"
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':librarys:baseframework')
    compile "com.android.support:support-v4:${SUPPORT_LIB_VERSION}"
    compile "com.android.support:appcompat-v7:${SUPPORT_LIB_VERSION}"
    compile "com.android.support:design:${SUPPORT_LIB_VERSION}"
    compile "com.jakewharton:butterknife:${BUTTERKNIFE_VERSION}"
    compile "com.jakewharton:butterknife-compiler:${BUTTERKNIFE_VERSION}"
    compile "com.squareup.retrofit2:retrofit:${RETROFIT2_VERSION}"
    compile "com.squareup.retrofit2:converter-gson:${RETROFIT2_VERSION}"
    compile "com.squareup.retrofit2:adapter-rxjava:${RETROFIT2_VERSION}"
    compile "com.github.hotchemi:permissionsdispatcher:${PERMISSION_VERSION}"
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:${PERMISSION_VERSION}"
    compile "com.google.android.gms:play-services-gcm:${PLAY_SERVICE_VERSION}"
    compile "com.google.android.gms:play-services-analytics:${PLAY_SERVICE_VERSION}"

    compile "com.google.android.gms:play-services-auth:${PLAY_SERVICE_VERSION}"
    compile "com.google.firebase:firebase-core:${PLAY_SERVICE_VERSION}"
    compile 'com.squareup.okhttp3:okhttp-urlconnection:3.5.0'
    compile 'org.apache.httpcomponents:httpcore:4.4.4'
    compile 'com.squareup.okio:okio:1.11.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.squareup.okhttp3:okhttp:3.8.1'
    compile 'com.facebook.android:facebook-android-sdk:4.17.0'
    compile 'com.molpay:molpay-mobile-xdk-android:3.3.0'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.5.0'
    compile 'com.android.support:multidex:1.0.0'
    compile('com.twitter.sdk.android:twitter-core:1.6.0@aar') {
        transitive = true;
    }
    compile "com.google.dagger:dagger:$DAGGER_VERSION"
    annotationProcessor "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-module-junit4:1.6.2'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.2'
    testCompile 'org.powermock:powermock-api-mockito:1.6.2'
    androidTestCompile 'com.android.support.test:runner:0.4'
    // Set this dependency to use JUnit 4 rules
    androidTestCompile 'com.android.support.test:rules:0.4'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true
    }
    compile 'com.orhanobut:logger:2.1.1'
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'
    compile 'com.youth.banner:banner:1.4.10'
    compile 'net.grandcentrix.tray:tray:0.12.0'

    //Payment With Adyen
    compile 'com.adyen.checkout:core:1.14.1'
    compile 'com.adyen.checkout:utils:1.14.1'
    compile 'com.adyen.checkout:ui:1.14.1'
    compile 'com.adyen.checkout:cardscan:1.14.1'
}



afterEvaluate {
    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        if (dx.additionalParameters == null) {
            dx.additionalParameters = []
        }
        dx.additionalParameters += '--multi-dex'
        dx.additionalParameters += "--main-dex-mAddressBook=$projectDir/multidex.keep".toString()
        dx.additionalParameters += '--minimal-main-dex'
    }
}

def ksFile = rootProject.file('keystore.properties')
def props = new Properties();
if (ksFile.canRead()) {
    props.load(new FileInputStream(ksFile))
    if (props != null) {
        android.signingConfigs.sign.storeFile file(props['KEYSTORE_FILE'])
        android.signingConfigs.sign.storePassword props['KEYSTORE_PASSWORD']
        android.signingConfigs.sign.keyAlias props['KEYSTORE_ALIAS']
        android.signingConfigs.sign.keyPassword props['KEYSTORE_ALIAS_PASSWORD']
    } else {
        println 'some entries in \'keystore.properties\' not found!'
    }
} else {
    println '\'keystore.properties\' not found!'
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def fileName = "";
        def outputFile = output.outputFile
        if (variant.buildType.name.equals('release')) {
            if(variant.flavorName.equals("WNP_LIVE")){
                fileName = "WNP_LIVE_${android.defaultConfig.versionName}_(${android.defaultConfig.versionCode})_release.apk"
            }else if(variant.flavorName.equals("WNP_UAT")){
                fileName = "WNP_UAT_${android.defaultConfig.versionName}_(${android.defaultConfig.versionCode})_release.apk"
            }
        }else if(variant.buildType.name.equals('debug')){
            if(variant.flavorName.equals("WNP_LIVE")){
                fileName = "WNP_LIVE_${android.defaultConfig.versionName}_(${android.defaultConfig.versionCode})_debug.apk"
            }else if(variant.flavorName.equals("WNP_UAT")) {
                fileName = "WNP_UAT_${android.defaultConfig.versionName}_(${android.defaultConfig.versionCode})_debug.apk"
            }
        }

        output.outputFile = new File(outputFile.parent, fileName)
    }
}

